============================
Using 0-add_integer.py
============================

This module defines an integer addition function ``add_integer(a, b=98)``.
The second arguement is optional with a default value of 98

Usage
=====

``add_integer`` is a function that adds 2 integers or floats and returns an integer. This is equivalent to using the ``+`` mathematical operator.

Import the function
====================

    >>> add_integer = __import__('0-add_integer').add_integer

Examples
========

Positive integers:
    >>> add_integer(1, 2)
    3

Positive and negative integers:
    >>> add_integer(1, -2)
    -1

Floats:
    >>> add_integer(1.5, 1.5)
    2

Float and integer:
    >>> add_integer(1.5, 2)
    3

Float and integer:
    >>> add_integer(-1.5, 2)
    1

Only one arguement:
    >>> add_integer(-1)
    97

``add_integer`` expects integers or floats as arguements otherwise TypeError is raised

>>> add_integer('def',-1)
Traceback (most recent call last):
TypeError: a must be an integer



>>> add_integer(-1,'sent')
Traceback (most recent call last):
TypeError: b must be an integer



>>> add_integer('str','abc')
Traceback (most recent call last):
TypeError: a must be an integer



>>> add_integer()
Traceback (most recent call last):
TypeError: add_integer() missing 1 required positional argument: 'a'



>>> add_integer(7, float('nan'))
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer



>>> add_integer(float('nan'))
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer



>>> add_integer(float('inf'))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer




>>> add_integer(1,float('inf'))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer



>>> add_integer(float('inf'), float('inf'))
Traceback (most recent call last): 
OverflowError: cannot convert float infinity to integer
